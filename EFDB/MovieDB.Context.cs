//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DornMovieApp.EFDB
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Data.Entity;
    using System.Data.Entity.Core;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Core.Objects.DataClasses;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;

    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Threading.Tasks;

    class BaseRepository<TEntity> where TEntity : class
    {
        internal JSONDBContext context;
        internal DbSet<TEntity> dbSet;

        public BaseRepository(JSONDBContext context)
        {
            this.context = context;
            this.dbSet = context.Set<TEntity>();
        }

        public virtual IEnumerable<TEntity> GetWithRawSql(string query,
            params object[] parameters)
        {
            return dbSet.SqlQuery(query, parameters).ToList();
        }

        public virtual IEnumerable<TEntity> Get(
            Expression<Func<TEntity, bool>> filter = null,
            Func<IQueryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null,
            string includeProperties = "")
        {
            IQueryable<TEntity> query = dbSet;

            if (filter != null)
            {
                query = query.Where(filter);
            }

            if (includeProperties != null)
            {
                foreach (var includeProperty in includeProperties.Split
                (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }


            if (orderBy != null)
            {
                return orderBy(query).ToList();
            }
            else
            {
                return query.ToList();
            }
        }

        public virtual TEntity GetByID(object id)
        {
            return dbSet.Find(id);
        }

        public virtual void Insert(TEntity entity)
        {
            dbSet.Add(entity);
        }

        public virtual void Delete(object id)
        {
            TEntity entityToDelete = dbSet.Find(id);
            Delete(entityToDelete);
        }

        public virtual void Delete(TEntity entityToDelete)
        {
            if (context.Entry(entityToDelete).State == EntityState.Detached)
            {
                dbSet.Attach(entityToDelete);
            }
            dbSet.Remove(entityToDelete);
        }

        public virtual void Update(TEntity entityToUpdate)
        {
            dbSet.Attach(entityToUpdate);
        }
    }

    public partial class JSONDBContext : ObjectContext
    {
        private JSONDB db;

        public JSONDBContext(string databaseFilePath) : base(databaseFilePath)
        {
            db = new JSONDB(databaseFilePath);

        }

        public DbSet Set<TEntity>() where TEntity : class { return new DbSet<TEntity>(); }

        public virtual DbSet<Movie> Movies { get; set; }

        public override void Attach(IEntityWithKey entity)
        {
            base.Attach(entity);
        }

        public override void AttachTo(string entitySetName, object entity)
        {
            base.AttachTo(entitySetName, entity);
        }

        public override void CreateDatabase()
        {
            base.CreateDatabase();
        }

        public override EntityKey CreateEntityKey(string entitySetName, object entity)
        {
            return base.CreateEntityKey(entitySetName, entity);
        }

        public override T CreateObject<T>()
        {
            return base.CreateObject<T>();
        }

        public override ObjectSet<TEntity> CreateObjectSet<TEntity>()
        {
            return base.CreateObjectSet<TEntity>();
        }

        public override ObjectSet<TEntity> CreateObjectSet<TEntity>(string entitySetName)
        {
            return base.CreateObjectSet<TEntity>(entitySetName);
        }

        public override bool DatabaseExists()
        {
            return base.DatabaseExists();
        }

        public override void DeleteDatabase()
        {
            base.DeleteDatabase();
        }

        public override void DeleteObject(object entity)
        {
            base.DeleteObject(entity);
        }

        public override void Detach(object entity)
        {
            base.Detach(entity);
        }

        public override void DetectChanges()
        {
            base.DetectChanges();
        }

        public override object GetObjectByKey(EntityKey key)
        {
            return base.GetObjectByKey(key);
        }

        public override void Refresh(RefreshMode refreshMode, IEnumerable collection)
        {
            base.Refresh(refreshMode, collection);
        }

        public override void Refresh(RefreshMode refreshMode, object entity)
        {
            base.Refresh(refreshMode, entity);
        }

        public override Task RefreshAsync(RefreshMode refreshMode, IEnumerable collection, CancellationToken cancellationToken)
        {
            return base.RefreshAsync(refreshMode, collection, cancellationToken);
        }

        public override Task RefreshAsync(RefreshMode refreshMode, object entity, CancellationToken cancellationToken)
        {
            return base.RefreshAsync(refreshMode, entity, cancellationToken);
        }

        public override int SaveChanges()
        {
            return base.SaveChanges();
        }

        public override Task<int> SaveChangesAsync()
        {
            return base.SaveChangesAsync();
        }

        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            return base.SaveChangesAsync(cancellationToken);
        }

        public override bool TryGetObjectByKey(EntityKey key, out object value)
        {
            return base.TryGetObjectByKey(key, out value);
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }
    }

    //public class MyDB
    //{
    //    internal JSONDBContext moviesDB;
    //    internal DbSet<Movie> movieTable;

    //    public MyDB()
    //    {
    //        movieTable = moviesDB.Set<Movie>();
    //    }
    //}
}
